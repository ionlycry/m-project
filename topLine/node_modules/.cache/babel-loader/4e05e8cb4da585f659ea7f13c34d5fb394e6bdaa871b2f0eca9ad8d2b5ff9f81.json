{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport { getItemListApi } from '@/api/artical';\nimport CellContent from '@/components/CellContent';\nexport default {\n  data() {\n    return {\n      itemlist: [],\n      loading: false,\n      finished: false,\n      timestamp: null,\n      error: false,\n      isRefreshLoading: false,\n      refreshSuccessTxt: '刷新成功'\n    };\n  },\n  components: {\n    CellContent\n  },\n  props: {\n    channel: {\n      type: Object,\n      required: true\n    }\n  },\n  methods: {\n    async onLoad() {\n      // 异步更新数据\n      // 请求获取数据\n      console.log(this.channel.id);\n      try {\n        const {\n          data: res\n        } = await getItemListApi({\n          channel_id: this.channel.id,\n          timestamp: this.timestamp || Date.now() //timestamp相当于当前页，res会返回一个pre-timestamp,相当于下一页\n        });\n\n        const {\n          results\n        } = res.data;\n        this.itemlist.push(...results); //数组追加 数组形式的数据，用展开语法合并\n        // console.log(results)\n\n        // 加载状态结束\n        this.loading = false;\n        // 测试 40条数据\n        if (this.itemlist.length > 40) {\n          return this.finished = true;\n        }\n        // 数据全部加载完成\n        // if (results.length) {\n        //   // 请求回来的数据有就更新timestamp\n        //   this.timestamp = res.data.pre_timestamp\n        // } else {\n        //   this.finished = true;\n        // }\n      } catch (error) {\n        console.log('出错了');\n        this.error = true;\n        this.loading = false; //请求失败loading关闭\n      }\n    },\n\n    async onRefresh() {\n      try {\n        // 成功读数据\n        const {\n          data: res\n        } = await getItemListApi({\n          channel_id: this.channel.id,\n          timestamp: Date.now()\n        });\n\n        // // 制造报错\n        // if (Math.random() < 0.5) {\n        //   JSON.parse('ASHDLKSAHJ')\n        // }\n\n        const {\n          results\n        } = res.data;\n        this.itemlist.unshift(...results); //向前插入10条数据\n        this.refreshSuccessTxt = `刷新成功！ 更新了${results.length}条数据`;\n        // 刷新状态结束\n        this.isRefreshLoading = false;\n      } catch (error) {\n        this.refreshSuccessTxt = '刷新失败！';\n        this.isRefreshLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;AAyBA;AACA;AACA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;EACA;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;MACA;MACAC;MACA;QACA;UAAAf;QAAA;UACAgB;UACAZ;QACA;;QAEA;UAAAa;QAAA;QACA;QACA;;QAEA;QACA;QACA;QACA;UACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;QACAF;QACA;QACA;MACA;IACA;;IACA;MACA;QACA;QACA;UAAAf;QAAA;UACAgB;UACAZ;QACA;;QAEA;QACA;QACA;QACA;;QAEA;UAAAa;QAAA;QACA;QACA;QACA;QACA;MACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["data","itemlist","loading","finished","timestamp","error","isRefreshLoading","refreshSuccessTxt","components","CellContent","props","channel","type","required","methods","console","channel_id","results"],"sourceRoot":"src/components/CellList","sources":["index.vue"],"sourcesContent":["<template>\r\n  <div class=\"cell-list\">\r\n    <van-pull-refresh\r\n      v-model=\"isRefreshLoading\"\r\n      @refresh=\"onRefresh\"\r\n      :success-text=\"refreshSuccessTxt\"\r\n      loading-text=\"加载中...\"\r\n      success-duration=\"1000\">\r\n      <van-list\r\n        v-model=\"loading\"\r\n        :finished=\"finished\"\r\n        finished-text=\"没有更多了\"\r\n        @load=\"onLoad\"\r\n        :error.sync=\"error\"\r\n        error-text=\"请求失败，点击重新加载\">\r\n        <CellContent\r\n          v-for=\"(item, index) in itemlist\"\r\n          :key=\"index\"\r\n          :artical=\"item\" />\r\n      </van-list>\r\n    </van-pull-refresh>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getItemListApi } from '@/api/artical'\r\nimport CellContent from '@/components/CellContent'\r\nexport default {\r\n  data() {\r\n    return {\r\n      itemlist: [],\r\n      loading: false,\r\n      finished: false,\r\n      timestamp: null,\r\n      error: false,\r\n      isRefreshLoading: false,\r\n      refreshSuccessTxt: '刷新成功',\r\n    }\r\n  },\r\n  components: {\r\n    CellContent,\r\n  },\r\n  props: {\r\n    channel: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  methods: {\r\n    async onLoad() {\r\n      // 异步更新数据\r\n      // 请求获取数据\r\n      console.log(this.channel.id)\r\n      try {\r\n        const { data: res } = await getItemListApi({\r\n          channel_id: this.channel.id,\r\n          timestamp: this.timestamp || Date.now(), //timestamp相当于当前页，res会返回一个pre-timestamp,相当于下一页\r\n        })\r\n\r\n        const { results } = res.data\r\n        this.itemlist.push(...results) //数组追加 数组形式的数据，用展开语法合并\r\n        // console.log(results)\r\n\r\n        // 加载状态结束\r\n        this.loading = false\r\n        // 测试 40条数据\r\n        if (this.itemlist.length > 40) {\r\n          return (this.finished = true)\r\n        }\r\n        // 数据全部加载完成\r\n        // if (results.length) {\r\n        //   // 请求回来的数据有就更新timestamp\r\n        //   this.timestamp = res.data.pre_timestamp\r\n        // } else {\r\n        //   this.finished = true;\r\n        // }\r\n      } catch (error) {\r\n        console.log('出错了')\r\n        this.error = true\r\n        this.loading = false //请求失败loading关闭\r\n      }\r\n    },\r\n    async onRefresh() {\r\n      try {\r\n        // 成功读数据\r\n        const { data: res } = await getItemListApi({\r\n          channel_id: this.channel.id,\r\n          timestamp: Date.now(),\r\n        })\r\n\r\n        // // 制造报错\r\n        // if (Math.random() < 0.5) {\r\n        //   JSON.parse('ASHDLKSAHJ')\r\n        // }\r\n\r\n        const { results } = res.data\r\n        this.itemlist.unshift(...results) //向前插入10条数据\r\n        this.refreshSuccessTxt = `刷新成功！ 更新了${results.length}条数据`\r\n        // 刷新状态结束\r\n        this.isRefreshLoading = false\r\n      } catch (error) {\r\n        this.refreshSuccessTxt = '刷新失败！'\r\n        this.isRefreshLoading = false\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.cell-list {\r\n  height: 79vh;\r\n  overflow-y: auto;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}